package eu.sia.easyway.groovy.reproducer;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.junit.Test;

import eu.sia.easyway.groovy.reproducer.runnable.AutogeneratedCachedScriptRunner;
import eu.sia.easyway.groovy.reproducer.runnable.AutogeneratedScriptRunnerOneClassLoaderOneScript;
import eu.sia.easyway.groovy.reproducer.runnable.AutogeneratedScriptRunnerRandomScript;
import eu.sia.easyway.groovy.reproducer.runnable.AutogeneratedScriptRunnerSameClassLoaderOom;
import eu.sia.easyway.groovy.reproducer.runnable.AutogeneratedScriptRunnerSameScriptRecompiledEveryTime;
import eu.sia.easyway.groovy.reproducer.runnable.Observer;
import eu.sia.easyway.groovy.reproducer.runnable.ObserverImpl;
import eu.sia.easyway.groovy.reproducer.runnable.ObserverRunnable;
import eu.sia.easyway.groovy.reproducer.runnable.ScriptCacheImpl;
import eu.sia.easyway.groovy.reproducer.runnable.ScriptRandomizerImpl;
import eu.sia.easyway.groovy.reproducer.runnable.SimpleObserverRunnable;
import groovy.lang.Binding;
import groovy.lang.GroovyClassLoader;

public class ScriptStressTest {
	
	private Runnable createWorkerRunnable(Observer observer, Runnable runnable) {
		return new SimpleObserverRunnable(observer, runnable);
	}
	
	@Test
	public void t0() throws InterruptedException {
		int nt = Integer.parseInt(System.getenv().getOrDefault("NUMBER_OF_THREADS", "4"));
		int nsec = Integer.parseInt(System.getenv().getOrDefault("TEST_LENGTH_SEC", "-1"));
		List<Thread> threads = new ArrayList<>();
		GroovyClassLoader gcl = new GroovyClassLoader();
		Observer observer = new ObserverImpl();
		List<Double> stats = new ArrayList<>();
		stats.add(Double.valueOf(1.0d));
		stats.add(Double.valueOf(5.0d));
		stats.add(Double.valueOf(10.0d));
		Runnable loopRunner = new SimpleLoopRunner(new ObserverRunnable(observer, stats), 5000L, 0);
		Thread obsThread = new Thread(loopRunner);
		obsThread.start();
		for (int i = 0; i < nt; ++i) {
			Binding b = new Binding();
			b.setProperty("message", UUID.randomUUID().toString());
			Runnable r1 = createWorkerRunnable(observer, new AutogeneratedScriptRunnerRandomScript());
			Runnable r2 = createWorkerRunnable(observer, new AutogeneratedScriptRunnerSameClassLoaderOom(gcl));
			Runnable r3 = createWorkerRunnable(observer, new AutogeneratedScriptRunnerOneClassLoaderOneScript());
			Runnable r4 = createWorkerRunnable(observer, new AutogeneratedScriptRunnerSameScriptRecompiledEveryTime());

			Runnable r5 = createWorkerRunnable(observer, new AutogeneratedCachedScriptRunner(
				new ScriptRandomizerImpl(1000), 
				new ScriptCacheImpl(1000, 30)));

			Thread t = new Thread(new SimpleLoopRunner(r1, 0L, 500000));
			threads.add(t);
			t.start();
		}
		for (Thread t : threads) {
			if (nsec > 0) {
				t.join(TimeUnit.SECONDS.toMillis(nsec));
			} else {
				t.join();
			}
		}
		obsThread.join();
	}
}
